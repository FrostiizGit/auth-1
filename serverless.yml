service: auth

provider:
  name: aws
  runtime: nodejs10.x
  region: eu-west-1
  memorySize: 512
  timeout: 5
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'ssm:GetParameters'
        - 'ssm:DescribeParameters'
        - 'lambda:InvokeFunction'
      Resource: '*'

functions:
  graphql:
    handler: src/index.handler
    name: "authentication-${opt:stage, 'dev'}" # beware whil changing this value, aws has naming conventions
    description: authentication services
    reservedConcurrency: 10 # you are going to want to change this value, refer to the doc
    events:
      - http:
          path: graphql
          method: post
          cors:
            origin: 'https://exemple.com' # domain which will access the auth
            headers:
              - x-csrf-token
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
    environment:
      ALLOW_REGISTRATION: ${ssm:AUTH_ALLOW_REGISTRATION} # SSM parameter
      DATABASE: 'auth' # database name
      COLLECTION: 'users' # collection name
      MONGO_URI: ${ssm:AUTH_MONGO_URI~true} # this mean it's a secureString SSM parameter
      GOOGLE_ID: 'xxxx.apps.googleusercontent.com' # change this with your google app
      CSRF_SECRET: ${ssm:AUTH_CSRF_SECRET~true}
      REFRESH_TOKEN_SECRET: ${ssm:AUTH_REFRESH_SECRET~true}
      REFRESH_COOKIE_NAME: 'a-cookie-name' # cookie names
      ACCESS_COOKIE_NAME: 'another-cookie-name'
      COOKIE_DOMAIN: 'exemple.com'
      PUB_KEY: ${ssm:AUTH_PUBLIC_KEY}
      PRV_KEY: ${ssm:AUTH_PRIVATE_KEY~true}
      RESET_PASS_DELAY: ${ssm:AUTH_RESET_PASS_DELAY} # in ms
      PWD_REGEX: '^(?!.*[\s])(?=.*[a-zA-Z])(?=.*[0-9])(?=.{6,32})'
      EMAIL_REGEX: '^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'

package:
  individually: true

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-plugin-warmup

modules:
  exclude:
    - aws-sdk
  deepExclude: # Excluded from deep nested node_modules
    - aws-sdk

custom:
  warmup:
    enabled: true
  webpack:
    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file
    includeModules: true   # Node modules configuration for packaging

resources:
  Resources:
      GatewayDefault4XX:
        Type: 'AWS::ApiGateway::GatewayResponse'
        Properties:
          ResponseParameters:
            gatewayresponse.header.Access-Control-Allow-Origin: "'https://exemple.com'"
            gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
            gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
            gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
          ResponseType: DEFAULT_4XX
          RestApiId:
            Ref: 'ApiGatewayRestApi'
      GatewayDefault5XX:
        Type: 'AWS::ApiGateway::GatewayResponse'
        Properties:
          ResponseParameters:
            gatewayresponse.header.Access-Control-Allow-Origin: "'https://exemple.com'"
            gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
            gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
            gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
          ResponseType: DEFAULT_5XX
          RestApiId:
            Ref: 'ApiGatewayRestApi'
